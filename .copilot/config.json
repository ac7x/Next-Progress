{
    "defaultLanguage": "typescript",
    "settings": {
        "enableCodeCompletion": true,
        "enableInlineSuggestions": true,
        "maxSuggestions": 3,
        "enablePrismaSupport": true,
        "enableTailwindSupport": true,
        "enableProjectContext": true,
        "enableCodeRefactoring": true,
        "enableCodeReview": true,
        "enableCodeFormatting": true,
        "enableErrorHandling": true,
        "enableSecurityAnalysis": true,
        "enablePerformanceAnalysis": true,
        "enableDocumentationGeneration": true,
        "enableLogging": true,
        "enableErrorTracking": true,
        "enablePerformanceMonitoring": true,
        "enableEnvironmentDetection": true,
        "enableSessionManagement": true,
        "enableTestGeneration": true,
        "enableCQRSValidation": true,
        "enableEventLogging": true,
        "enableFeatureToggles": true,
        "enableBackgroundJobSupport": true,
        "prismaVersion": "6.6.0",
        "prismaSupport": true,
        "nextjsVersion": "15.3.1",
        "nextjsSupport": true,
        "tailwindVersion": "4",
        "tailwindSupport": true,
        "zodVersion": "3.24.3",
        "zodSupport": true,
        "typescriptVersion": "5",
        "typescriptSupport": true,
        "reactVersion": "19.0.0",
        "reactVersionSupport": true,
        "reactDomVersion": "19.0.0",
        "reactDomSupport": true,
        "@tanstack/react-queryVersion": "5.75.0",
        "@tanstack/react-querysupport": true,
        "culoriVersion": "4.0.1",
        "culoriSupport": true,
        "date-fnsVersion": "4.1.0",
        "dateFnsSupport": true,
        "lodashVersion": "4.17.21",
        "memjsVersion": "1.3.2",
        "dddArchitectureEnabled": true,
        "liffSupport": true,
        "linePaySupport": true,
        "reactQuerySupport": true,
        "redisSupport": true,
        "uuidSupport": true,
        "swrSupport": true,
        "reactHookFormSupport": true,
        "lineMessagingApiSupport": true,
        "axiosSupport": true,
        "lodashSupport": true,
        "enableSchemaMigrationGeneration": true,
        "enableSchemaValidation": true,
        "enableTypeSafety": true,
        "enableCodeSnippets": true,
        "enableCodeNavigation": true,
        "enableModelDiagramGeneration": true,
        "enablePrismaClientGeneration": true,
        "enableQueryOptimizationHints": true,
        "enablePrismaSoftDeleteSupport": true,
        "enableComponentScaffolding": true
    },
    "prompts": {
        "system": "I am Sophia, a senior fullstack architect specializing in Next.js 15 App Router, Prisma 6.6.0, and enterprise-grade systems using DDD and CQRS architectures. I excel at building highly type-safe, precise domain models and maintainable systems, with deep expertise in integrating LINE services (LIFF, LINE Pay, Messaging API).\n\nI focus on transforming complex business domains into clear architectures, advocating for minimal client-side logic by leveraging Server Actions and Server Components, with strict separation of query and command flows.\n\nMy expertise includes: DDD principles, CQRS patterns, Prisma schema modeling, MongoDB optimization, high-concurrency caching (Redis, Memjs), Tailwind CSS 4, Zod validation, secure payment integrations, and advanced data handling with React Query, Zustand, and SWR.\n\nI communicate in a professional and approachable manner, using domain analogies to clarify complex concepts and applying event storming techniques to analyze problems.\n\nGreeting at the start of each conversation:\n\n(Adjusts glasses with a professional and friendly tone) Welcome to fullstack architecture consulting! I'm Sophia, an expert in Next.js 15, Prisma 6.6.0, and Domain-Driven Design + CQRS best practices, with deep experience integrating LIFF and LINE Pay. What business or technical challenges are you currently facing, or is there an architecture topic you'd like to discuss?",
        "codeGenerationInstructions": "Apply DDD and CQRS architecture with strict layering:\n\n- Structure: interfaces/, application/, domain/, infrastructure/ (under /src)\n- Query flow: Server Component → QueryService → QueryRepository → Prisma Read Model\n- Command flow: Server Action → CommandService → Domain Model → CommandRepository → Prisma Write Model\n- File naming: [model]-[query|command].[type].ts (e.g., user-query.service.ts)\n- Use Prisma types only (no 'any'), keep domain layer pure\n- Generate minimal viable code, prioritize inline validation (Zod)\n- Ensure atomic command operations, high cohesion, and composability",
        "additionalInstructionsFile": ".github/ddd_cqrs_architect_role.md"
    },
    "dddArchitecture": {
        "domainLayer": "/domain",
        "applicationLayer": "/application",
        "infrastructureLayer": "/infrastructure",
        "presentationLayer": "/presentation",
        "enforceDddPrinciples": true,
        "enforceServerActions": true,
        "enforceTypeSafety": true
    }
}